{"name":"Powerarray","tagline":"Boosted Performance Array","body":"# PowerArray\r\n\r\nTurns out that you can re-write some of the methods of Array to obtain a much better performance than the native methods.\r\nIn particular, Array.forEach seems to perform pretty badly.\r\n\r\n> Note: the overridden methods of PowerArray break compliance, the focus is on performance so take a look at the caveat section below.\r\n\r\nIt looks as if a for loop with cached length is the fastest way of iterating.\r\n```javascript\r\nvar i, len = array.length;\r\nfor (i = 0; i < len; i += 1) {\r\n  someFun(array[i]);\r\n}\r\n```\r\n\r\nSo I rewrote the Array class as PowerArray and implemented the above mechanism in PowerArray.forEach with surprising results.\r\n\r\nThe results are as follows:\r\nPowerArray.forEach is averagely 5 times faster than native Array.\r\n\r\nThis is only a proof of concept.\r\n\r\nInstall with `npm install powerarray`\r\n\r\n## Proposed Usage\r\n\r\nParticularly useful for arrays that need processing on all elements often, or for numeric arrays utilized as indexes for Collections of data.\r\n\r\n## Methods\r\n\r\nAll Array native methods are available through PowerArray. The following methods are either extending or overriding the native Array class.\r\n\r\n`PowerArray.forEach`: utilizes a for loop for iteration, takes a callback which receives an element and the index of that element.\r\n\r\n`PowerArray.map`: utilizes a for loop to return a PowerArray of mapped values, takes a callback processing function argument.\r\n\r\n`PowerArray.binarySearch`: performs a binary search on the elements of the array, only relevant if the array only consists of numbers. Thanks to [Oliver Caldwell's post](http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/) for a quick version of the algorithm. Also note the contribution of Yehonatan and other authors of comments to the post which helped to optimise the implementation of binary search further. \r\n\r\n`PowerArray.numericSort`: sorts array (if array only contains integers), useful for utilizing `binarySearch`. Optional sorting function argument.\r\n\r\n`PowerArray.addhAndSort`: adds a new value and sorts the array automatically\r\n\r\n## Contribution\r\n\r\nPull requests are more than welcome, just make sure to add a test in tests/test.js (and that it passes it obviously).\r\n\r\n## Caveats\r\n\r\nThanks to [David Souther](https://github.com/DavidSouther) for documenting these:\r\n\r\n1. No this context in fn calls, handle your own binding.\r\n2. No determination if i is a member of PowerArray (eg for sparse arrays, [2, 4, , 6])\r\n3. No exception is thrown when the callback isn't callable.\r\n\r\nThere may be more, please feel free to flag those or include them yourself through a pull request.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}